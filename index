// index.js - Versión GitHub optimizada
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const csv = require('csv-parser');

// Variables de entorno o directas
const supabaseUrl = process.env.SUPABASE_URL || 'TU_URL_AQUI';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'TU_KEY_AQUI';

const supabase = createClient(supabaseUrl, supabaseKey);

async function uploadCSV() {
  console.log('🚀 Iniciando upload a Supabase...');
  
  const results = [];
  
  return new Promise((resolve, reject) => {
    fs.createReadStream('data.csv')
      .pipe(csv())
      .on('data', (data) => results.push(data))
      .on('end', async () => {
        console.log(`📊 Procesando ${results.length} registros...`);
        
        try {
          // Upload en lotes de 1000
          const batchSize = 1000;
          let uploaded = 0;
          
          for (let i = 0; i < results.length; i += batchSize) {
            const batch = results.slice(i, i + batchSize);
            
            const { data, error } = await supabase
              .from('tu_tabla')
              .insert(batch);
            
            if (error) {
              console.error('❌ Error en lote:', error);
              throw error;
            }
            
            uploaded += batch.length;
            console.log(`✅ Subidos: ${uploaded}/${results.length}`);
          }
          
          console.log('🎉 ¡Upload completado exitosamente!');
          resolve();
          
        } catch (error) {
          console.error('💥 Error durante upload:', error);
          reject(error);
        }
      })
      .on('error', reject);
  });
}

// Ejecutar
uploadCSV().catch(console.error);
